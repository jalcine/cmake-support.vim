*cmake.txt* CMake Integration for Vim                *cmake*

CONTENTS ~
                                                   *cmake-contents*
===============================================================================

1. About                                           |cmake-about|
2. Quick start                                     |cmake-quickstart|
  2.1. Discovering CMake                           |cmake-quickstart-discover|
  2.2. Installing the Plugin                       |cmake-quickstart-install|
3. Options                                         |cmake-options|
  3.1. Buffer-Specifc Options                      |cmake-buffer-options|
    3.1.1 `b:cmake_target`                           |b:cmake_target|
    3.1.2 `b:cmake_binary_dir`                       |b:cmake_binary_dir|
    3.1.3 `b:cmake_source_dir`                       |b:cmake_source_dir|
    3.1.3 `b:cmake_include_dirs`                     |b:cmake_include_dirs|
    3.1.3 `b:cmake_libraries`                        |b:cmake_libraries|
  3.2. Global Options                              |cmake-global-options|
    3.2.1  `g:cmake_build_directories`               |g:cmake_build_directories|
    3.2.2  `g:cmake_build_shared_libs`               |g:cmake_build_shared_libs|
    3.2.3  `g:cmake_build_toolchain`                 |g:cmake_build_toolchain|
    3.2.4  `g:cmake_build_type`                      |g:cmake_build_type|
    3.2.5  `g:cmake_c_compiler`                      |g:cmake_c_compiler|
    3.2.6  `g:cmake_cxx_compiler`                    |g:cmake_cxx_compiler|
    3.2.7  `g:cmake_ctags`                           |g:cmake_ctags|
    3.2.8  `g:cmake_extensions`                      |g:cmake_extensions|
    3.2.9  `g:cmake_flags`                           |g:cmake_flags|
    3.2.10 `g:cmake_generator`                       |g:cmake_generator|
    3.2.11 `g:cmake_install_prefix`                  |g:cmake_install_prefix|
    3.2.12 `g:cmake_set_makeprg`                     |g:cmake_set_makeprg|
4. Methods                                         |cmake-methods|
  4.1 Creating a Project                           |:CMakeCreateBuild|
  4.2 Building                                     |:CMakeBuild|
  4.3 Cleaning                                     |:CMakeClean|
  4.4 Testing                                      |:CMakeTest|
  4.5 Installing                                   |:CMakeInstall|
  4.6 Get Cache Variable's Value                   |:CMakeGetVar|
  4.7 Invoking Targets                             |:CMakeTarget|
  4.8 Cleaning & Building At Once                  |:CMakeCleanBuild|
5. Integrations                                    |cmake-integrations|
  5.1 Syntastic                                    |cmake-integrations-syntastic|
  5.2 YouCompleteMe                                |cmake-integrations-ycm|
6. API                                             |cmake-api|
  6.1 `cmake#augroup#init()`                         |cmake#augroup#init()|
  6.2 `cmake#augroup#on_buf_enter()`                 |cmake#augroup#on_buf_enter()|
  6.3 `cmake#augroup#on_buf_write()`                 |cmake#augroup#on_buf_write()|
  6.4 `cmake#augroup#on_filetype()`                  |cmake#augroup#on_filetype()|
  6.5 `cmake#augroup#on_vim_enter()`                 |cmake#augroup#on_vim_enter()|
  6.6 `cmake#buffer#has_project()`                   |cmake#buffer_has_project()|
  6.7 `cmake#buffer#set_options()`                   |cmake#buffer_set_options()|
  6.8 `cmake#cache#write()`                          |cmake#cache_write()|
  6.9 `cmake#cache#read()`                           |cmake#cache_read()|
  6.10 `cmake#cache#read_all()`                       |cmake#cache_read_all()|
  6.11 `cmake#cache#write_all()`                      |cmake#cache_write_all()|
  6.12 `cmake#commands#build()`                       |cmake#commands_build()|
  6.13 `cmake#commands#invoke_target()`               |cmake#commands_invoke_target()|
  6.14 `cmake#commands#build_target()`                |cmake#commands_build_target()|
  6.15 `cmake#commands#clear_ctags()`                 |cmake#commands_clear_ctags()|
  6.16 `cmake#commands#generate_ctags()`              |cmake#commands_generate_ctags()|
  6.17 `cmake#commands#generate_local_ctags()`        |cmake#commands_generate_local_ctags()|
  6.18 `cmake#commands#clean()`                       |cmake#commands_clean()|
  6.19 `cmake#commands#test()`                        |cmake#commands_test()|
  6.20 `cmake#commands#rebuild_cache()`               |cmake#commands_rebuild_cache()|
  6.21 `cmake#commands#install()`                     |cmake#commands_install()|
  6.22 `cmake#commands#create_build()`                |cmake#commands_create_build()|
  6.23 `cmake#commands#rehash_project()`              |cmake#commands_rehash_project()|
  6.24 `cmake#commands#apply_buffer_commands()`       |cmake#commands_apply_buffer_commands()|
  6.25 `cmake#commands#apply_global_commands()`       |cmake#commands_apply_global_commands()|
  6.26 `cmake#ctags#invoke()`                         |cmake#ctags#invoke()|
  6.27 `cmake#ctags#cache_directory()`                |cmake#ctags#cache_directory()|
  6.28 `cmake#ctags#filename()`                       |cmake#ctags#filename()|
  6.29 `cmake#ctags#generate_for_target()`            |cmake#ctags#generate_for_target()|
  6.30 `cmake#ctags#refresh()`                        |cmake#ctags#refresh()|
  6.31 `cmake#extension#init()`                       |cmake#extension#init()|
  6.32 `cmake#extension#list()`                       |cmake#extension#list()|
  6.33 `cmake#extension#flex()`                       |cmake#extension#flex()|
  6.34 `cmake#extension#function_for()`               |cmake#extension#function_for()|
  6.35 `cmake#extension#functions_for()`              |cmake#extension#functions_for()|
  6.36 `cmake#flags#inject()`                         |cmake#flags#inject()|
  6.37 `cmake#flags#collect_for_target()`             |cmake#flags#collect_for_target()|
  6.38 `cmake#flags#filter()`                         |cmake#flags#filter()|
  6.39 `cmake#makeprg#for_target()`                   |cmake#makeprg#for_target()|
  6.40 `cmake#makeprg#set_for_buffer()`               |cmake#makeprg#set_for_buffer()|
  6.41 `cmake#path#refresh()`                         |cmake#path#refresh()|
  6.42 `cmake#path#reset()`                           |cmake#path#reset()|
  6.43 `cmake#path#update()`                          |cmake#path#update()|
  6.44 `cmake#path#refresh_global_paths()`            |cmake#path#refresh_global_paths()|
  6.45 `cmake#path#refresh_target_paths()`            |cmake#path#refresh_target_paths()|
  6.46 `cmake#targets#build()`                        |cmake#targets#build()|
  6.47 `cmake#targets#exists()`                       |cmake#targets#exists()|
  6.48 `cmake#targets#binary_dir()`                   |cmake#targets#binary_dir()|
  6.49 `cmake#targets#source_dir()`                   |cmake#targets#source_dir()|
  6.50 `cmake#targets#include_dirs()`                 |cmake#targets#include_dirs()|
  6.51 `cmake#targets#libraries()`                    |cmake#targets#libraries()|
  6.52 `cmake#targets#for_file()`                     |cmake#targets#for_file()|
  6.53 `cmake#targets#flags()`                        |cmake#targets#flags()|
  6.54 `cmake#targets#list()`                         |cmake#targets#list()|
  6.55 `cmake#targets#files()`                        |cmake#targets#files()|
  6.56 `cmake#targets#cache()`                        |cmake#targets#cache()|
  6.57 `cmake#util#echo_msg()`                        |cmake#util#echo_msg()|
  6.58 `cmake#util#echo_err()`                        |cmake#util#echo_err()|
  6.59 `cmake#util#binary_dir()`                        |cmake#util#binary_dir()|
  6.60 `cmake#util#source_dir()`                        |cmake#util#source_dir()|
  6.61 `cmake#util#has_project()`                        |cmake#util#has_project()|
  6.62 `cmake#util#run_make()`                        |cmake#util#run_make()|
  6.63 `cmake#util#run_cmake()`                        |cmake#util#run_cmake()|
  6.64 `cmake#util#shell_exec()`                        |cmake#util#shell_exec()|
  6.65 `cmake#util#shell_bgexec()`                        |cmake#util#shell_bgexec()|

===============================================================================

ABOUT                                              *cmake-about*

CMake is a "Cross-Platform Makefile generator". However, CMake can generate
more than Makefiles; including files for Eclipse and KDevelop build systems
as well as Ninja build files (from the Chromium project), making it quite
diverse in its output.

The act of integrating CMake with Vim allows for developers to use the
facilities of CMake without having to constantly switch back and forth between
Vim and your terminal (or a multiplexer in the terminal). This plugin takes it
a step further and automatically sets 'makeprg' for you to help other tools
related to Java, C++, C, Objective C or Fortan-based programming easily invoke
CMake's version of the build system. It can also incorporate support with other
plugins like `vim-dispatch`, `YouCompleteMe`, and `syntastic`.

2. QUICK START ~
                                                    *cmake-quickstart*
Ensure that you have a working (discoverable in '$PATH' by Vim) version of
CMake. You can check that CMake is invokable by Vim by running the following
command: >

  !cmake --version

You should get output similar to the following: >

  cmake version 2.8.10.1

At the time of writing, CMake version 2.6+ or greater would work with
'cmake', but feel free to send a report if older versions don't work.

4. METHODS ~
                                                               *cmake-methods*
There's a few methods binded to the editor for use of the developer. In the
future, some of these methods might be automatically mapped to the keyboard
within CMake files for easy use.

4.1 CREATING A BUILD ~
                                                           *:CMakeCreateBuild*

`:CMakeCreateBuild` takes only one argument, the name of the directory that
the build directory will be. It'll fail if the name isn't one of the values
provided in `g:cmake_build_directories` so take care to use one of those.

It'll make the directory if it doesn't exist, remove `CMakeCache.txt` if it
exists (with confirmation) and invoke CMake within that directory.

4.2 BUILDING ~
                                                                 *:CMakeBuild*

Invokes `cmake --build $CMAKE_BINARY_DIR --target all`, building all CMake
targets at once.

4.3 CLEANING ~
                                                                 *:CMakeClean*

Invokes `cmake --build $CMAKE_BINARY_DIR --target clean`, cleaning the project
of build artificats.

4.4 TESTING ~
                                                                  *:CMakeTest*

Invokes `make -C $CMAKE_BINARY_DIR test`, running whatever you got for that
target.

4.5 INSTALLING ~
                                                                *:CMakeInstall*

Invokes `make -C $CMAKE_BINARY_DIR install`, installs all of the things!
Doesn't take into consideration file permissions or access, silly ol' make.

4.6 GET CACHE VARIABLE'S VALUE ~
                                                                *:CMakeGetVar*

Obtains the specified variable's value from CMake's cache. Note that fact, it
has to be set into the cache for it to be retrieved.

4.7 INVOKING TARGETS ~
                                                                *:CMakeTarget*

Invokes `cmake --build $CMAKE_BINARY_DIR --target <target>`, <target> being
the target you'd choose to invoke.

4.8 CLEANING & BUILDING AT ONCE ~
                                                            *:CMakeCleanBuild*

Invokes `:CMakeClean` and then `:CMakeBuild`.

5. INTEGRATIONS ~
                                                          *cmake-integrations*

Life isn't fun if a plug-in doesn't integrate to another. `cmake.vim`, with a
bit of lost sleep, can work with syntastic and You Complete Me with with the
enabling of an option.

5.1. SYNTASTIC ~
                                                *cmake-integrations-syntastic*

No extra work is required. `cmake.vim` adds the necessary flags to all of the
C and C++ checkers. Work is planned to refactor this logic and allow explicit
checker parameters (since it's targeted for the gcc/ycm checkers and not
cpplint).

5.2. YOU COMPLETE ME ~
                                                      *cmake-integrations-ycm*

YouCompleteMe provides a means of extending its configuration for the use of
autocompletion. To do so, you'd need to get the "b:cmake_flags" variables
from your "client_data" dictionary. From there, you'd add it to the list of
flags that are to be passed into YCM.

    cmake_flags = kwargs['client_data']
    final_flags += cmake_flags

This can be disabled by setting `g:cmake_injects_flags.ycm` to 0.

6. CMake's API ~
                                                        *cmake-api*

`cmake.vim` exposes an API of sorts that's used for every aspect of the plugin
for other people to use.

6.1 cmake#augroup#init() ~
                                                       *cmake#augroup#init()*

Arguments: None
Returns: None

This function sets up the augroup `cmake.vim` for Vim. It's useful if you
happened to remove said augroup. It's used by the project on
`plugin/cmake.vim` sourcing.


6.2 cmake#augroup#on_vim_enter() ~
                                                   *cmake#augroup#on_vim_enter()*

Arguments: None
Returns: None

Handles actions necessary for setting up Vim for cmake.vim support.
NOTE: For now, this just caches the entire project's target information.


6.3 cmake#augroup#on_buf_enter() ~
                                                   *cmake#augroup#on_buf_enter()*

Arguments: None
Returns: None

Handles actions necessary for entering a buffer with CMake support.
This currently does the following:
  - Adds options for the buffer, like `b:cmake_target`.
  - Updates the `&path` variable for the current buffer.
  - Updates the `&makeprg` variable for the current buffer.

6.4 cmake#augroup#on_file_type(filetype) ~
                                              *cmake#augroup#on_file_type(filetype)*

Arguments: filetype
Returns: None

Handles the work necessary for the provided filetype.
This currently does the following:
  - Updates meta-data for the current buffer (`cmake#buffer#set_options()`)
  - Updates `&makeprg`, `&path`, `&tags` options for the buffer.
  - Updates `&flags` for the buffer's target.
  - Adds buffer-specific aucommands to help with updating its meta-data.
Bails out early if `b:cmake_target` isn't set.

6.5 cmake#augroup#on_buf_write() ~
                                              *cmake#augroup#on_buf_write()*

Arguments: None
Returns: None

Handles the work necessary after the buffer's written.
This currently does the following:
  - Regenerates tags from the buffer's target files.


vim:tw=78:ts=8:ft=help:norl:nospell:
